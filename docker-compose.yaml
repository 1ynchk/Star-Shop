
networks:

  mynetwork:
    driver: bridge

services:

  db:
    image: postgres:14-alpine

    ports: 
      - "5431:5432"

    restart: always

    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345qwerty
      POSTGRES_DB: starshop-db

    networks: 
      - mynetwork

    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 5s
        retries: 5 

  backend:

    build:
      context: ./backend-f
      dockerfile: dockerfile

    ports:
      - "8000:8000"

    restart: always

    environment:
      - DB_NAME=starshop-db
      - DB_HOST=db
      - DB_PORT=5432
      - DB_PASSWORD=12345qwerty
      - DB_USER=postgres
      - AWS_ACCESS_KEY_ID=YOUR-KEY
      - AWS_SECRET_ACCESS_KEY=YOUR-KEY
      - AWS_STORAGE_BUCKET_NAME=YOUR-BUCKET
      - AWS_S3_ENDPOINT_URL=YOUR-URL

    depends_on:
      db:
        condition: service_healthy

    networks:
      - mynetwork
    
    command: >
      sh -c "python manage.py makemigrations &&
        python manage.py migrate && 
        python starshop/vault.py &&
        python manage.py collectstatic --noinput &&
        python manage.py loaddata categories &&
        python manage.py loaddata books &&
        python manage.py loaddata chancellery &&
        python manage.py loaddata banners &&
        (echo \"from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.get_or_create(username='admin', defaults={'email':'admin@example.com', 'is_superuser':True, 'is_staff':True, 'is_active':True, 'password':'123TestPassword'})\" | python manage.py shell) &&
        python -m gunicorn starshop.wsgi:application --bind 0.0.0.0:8000" 

  frontend:

    build: 
      context: ./frontend-f
      dockerfile: dockerfile

    ports:
      - "80:80"

    restart: always

    environment: 
      - REACT_APP_API_URL=/api

    networks:  
      - mynetwork

    depends_on:
      - backend
